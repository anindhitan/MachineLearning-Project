# -*- coding: utf-8 -*-
"""Data_Time_Series 222.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yhm9cRBgfjagbql-w1sJpU2Gu_nhFslT

Nama : Anindhita Nisitasari

# Set the Data
"""

# install package
!pip install -q kaggle
from google.colab import files
import io
import zipfile
import pandas as pd
import re
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from keras.layers import Dense, LSTM

! chmod 600 /content/kaggle.json

! KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d jaganadhg/house-hold-energy-data

zip_file = zipfile.ZipFile('/content/house-hold-energy-data.zip', 'r')
zip_file.extractall('/tmp/')

energydata_train = pd.read_csv("/tmp/D202.csv")
energydata_train.head()

# Mengetahui banyaknya data
energydata_train.shape

# Mengecek apakah ada nilai Null atau tidak
energydata_train.isnull().sum()

# Mengecek penggunaan Memori
print(energydata_train.info())

dates = energydata_train['DATE'].values
usage  = energydata_train['USAGE'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, usage)
plt.title('Usage average in kWh',
          fontsize=20);

energydata_train['DATE']=pd.to_datetime(energydata_train['DATE'])
energydata_train['DATE'].head()
energydata_train['USAGE'].fillna(energydata_train['USAGE'].mean(), inplace=True)
data = energydata_train[['DATE','USAGE']]
data.head()

"""# Model"""

data=energydata_train[['DATE','USAGE']].copy()
data['just_date'] = data['DATE'].dt.date

final=data.drop('DATE',axis=1)
final.set_index('just_date', inplace= True)
final.head()

final.info()

# data values
date = energydata_train['DATE'].values
usage = energydata_train['USAGE'].values

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

x_train, x_test, y_train, y_test = train_test_split(usage, date, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

"""arsitektur model gunakan 2 buah layer LSTM. Ketika menggunakan 2 buah layer LSTM, perhatikan bahwa layer pertama harus memiliki parameter return_sequences yang bernilai True."""

max =energydata_train['USAGE'].max()
print('Max total : ' )
print(max)

min = energydata_train['USAGE'].min()
print('Min total: ')
print(min)

x = (90.0 - 1.0) * (10 / 100)
print(x)

# model
from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

# callback
class newCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      self.model.stop_training = True
      print("\nMAE of the model < 10% of data scale")
callbacks = newCallback()

tf.keras.backend.set_floatx('float64')
history = model.fit(data_x_train ,epochs=50, validation_data=data_x_test, callbacks=[callbacks])